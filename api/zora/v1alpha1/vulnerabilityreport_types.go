// Copyright 2023 Undistro Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// VulnerabilityReportSpec defines the desired state of VulnerabilityReport
type VulnerabilityReportSpec struct {
	Cluster    string `json:"cluster"`
	Image      string `json:"image"`
	Repository string `json:"repository,omitempty"`
	Tag        string `json:"tag,omitempty"`
	Digest     string `json:"digest,omitempty"`

	TotalResources  int                 `json:"totalResources"`
	Resources       map[string][]string `json:"resources"`
	Vulnerabilities []Vulnerability     `json:"vulnerabilities"`

	Summary VulnerabilitySummary `json:"summary"`
}

type Vulnerability struct {
	ID          string `json:"id"`
	Severity    string `json:"severity"`
	Title       string `json:"title"`
	Description string `json:"description,omitempty"`
	Package     string `json:"package"`
	Version     string `json:"version"`
	FixVersion  string `json:"fixVersion,omitempty"`
	URL         string `json:"url,omitempty"`
	Status      string `json:"status,omitempty"`
	Type        string `json:"type,omitempty"`
	Score       string `json:"score,omitempty"`
}

type VulnerabilitySummary struct {
	Total int `json:"total"`

	Critical int `json:"critical"`
	High     int `json:"high"`
	Medium   int `json:"medium"`
	Low      int `json:"low"`
	Unknown  int `json:"unknown"`
}

// VulnerabilityReportStatus defines the observed state of VulnerabilityReport
type VulnerabilityReportStatus struct{}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:resource:shortName={vuln,vulns,vulnerabilities}
//+kubebuilder:printcolumn:name="Cluster",type="string",JSONPath=".spec.cluster",priority=0
//+kubebuilder:printcolumn:name="Image",type="string",JSONPath=".spec.image",priority=0
//+kubebuilder:printcolumn:name="Total",type="string",JSONPath=".spec.summary.total",priority=0
//+kubebuilder:printcolumn:name="Critical",type="string",JSONPath=".spec.summary.critical",priority=0
//+kubebuilder:printcolumn:name="High",type="string",JSONPath=".spec.summary.high",priority=0
//+kubebuilder:printcolumn:name="Medium",type="string",JSONPath=".spec.summary.medium",priority=1
//+kubebuilder:printcolumn:name="Low",type="string",JSONPath=".spec.summary.low",priority=1
//+kubebuilder:printcolumn:name="Unknown",type="string",JSONPath=".spec.summary.unknown",priority=1
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp",priority=0

// VulnerabilityReport is the Schema for the vulnerabilityreports API
// +genclient
// +genclient:noStatus
type VulnerabilityReport struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   VulnerabilityReportSpec   `json:"spec,omitempty"`
	Status VulnerabilityReportStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// VulnerabilityReportList contains a list of VulnerabilityReport
type VulnerabilityReportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VulnerabilityReport `json:"items"`
}

func init() {
	SchemeBuilder.Register(&VulnerabilityReport{}, &VulnerabilityReportList{})
}
